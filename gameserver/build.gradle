apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'antlr'
apply plugin: 'application'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

test.testLogging.events = ["passed", "skipped", "failed"]

sourceSets {
    generated {
        java {
            srcDir 'src/generated/java'
        }
    }
}

jar {
    baseName = 'gameserver'
    version = "${version}"
}

repositories {
    mavenCentral()
}

dependencies {
    antlr('org.antlr:antlr4:+')

    compile project(":common")

    // Spring
    compile 'org.springframework:spring-core:5.0.0.M1'
    compile 'org.springframework:spring-context:5.0.0.M1'

    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-integration')
    compile("org.springframework.integration:spring-integration-java-dsl:${springJavaDslVersion}")
    compile('org.springframework.boot:spring-boot-starter-artemis')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-validation')

    //compile('org.springframework.boot:spring-boot-starter-actuator')
    //compile('org.springframework.boot:spring-boot-actuator-docs')
    //compile('org.springframework.boot:spring-boot-starter-mail')
    //compile('org.springframework.boot:spring-boot-starter-remote-shell')

    compile('org.springframework.integration:spring-integration-ip')
    compile("com.google.code.gson:gson:2.6.2")

    compile("com.google.guava:guava:${guavaVersion}")

    // math library
    compile("org.apache.commons:commons-math3:${apacheMathVersion}")

    // html compressor
    compile('com.googlecode.htmlcompressor:htmlcompressor:1.5.2')
    compile('com.google.javascript:closure-compiler:v20160619')
    compile('com.yahoo.platform.yui:yuicompressor:2.4.8')

    // Hibernate
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    compile("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    compile("org.hibernate:hibernate-java8:${hibernateVersion}")

    //Core stuff (Dispatchers, Functional interfaces...)
    compile "io.projectreactor:reactor-core:$reactorVersion"
    //Everything Stream
    compile "io.projectreactor:reactor-stream:$reactorVersion"

    //Everything Routing (Event Bus)
    //compile "io.projectreactor:reactor-bus:$reactorVersion"

    //todo not needed at compile time, should be used only for tests.
    compile("org.apache.activemq:artemis-jms-server:${artemisJmsServerVersion}")

    runtime('org.hsqldb:hsqldb')
    runtime('mysql:mysql-connector-java')

    optional("org.springframework.boot:spring-boot-configuration-processor")
}

dependencies {
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M2'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M2'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.0-M2'

    testCompile 'org.assertj:assertj-core:3.5.2'

    testCompile 'org.springframework:spring-test:5.0.0.M1'

    testRuntime('org.hsqldb:hsqldb')
}

compileJava.dependsOn(processResources)

task copyGeneratedParser(type: Copy) {
    delete fileTree(dir: "src/generated/java/")
    into('src/generated/java/')
    from("${buildDir}/generated-src/antlr/main")
}

generateGrammarSource {
    arguments += ["-lib", "src/main/antlr/ru/jts_dev/gameserver/parser"]
    arguments += ["-package", "ru.jts_dev.gameserver.parser"]
}

generateGrammarSource.finalizedBy copyGeneratedParser


applicationDefaultJvmArgs = ["-server"]

clean {
    delete fileTree(dir: "src/generated/java/")
}
